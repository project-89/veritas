version: '3.8'

services:
  # API Service
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile.dev
    ports:
      - "4000:4000"
      - "9229:9229"
    volumes:
      - ./:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - API_URL=http://localhost:4000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MEMGRAPH_HOST=memgraph
      - MEMGRAPH_PORT=7687
      - KAFKA_BROKER=kafka:9092
      - NODE_OPTIONS=--no-experimental-fetch
      - VITE_CJS_IGNORE_WARNING=true
      - VITE_CJS_LEGACY_DEV=true
      - OPENSSL_CONF=/dev/null
    depends_on:
      - redis
      - memgraph
      - kafka
    networks:
      - veritas-network
    command: ["npm", "run", "serve:api"]

  # Frontend Service
  frontend:
    build:
      context: .
      dockerfile: apps/visualization-showcase/Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      - ./:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - API_URL=http://localhost:4000
      - NODE_OPTIONS=--no-experimental-fetch
      - VITE_CJS_IGNORE_WARNING=true
      - VITE_CJS_LEGACY_DEV=true
      - OPENSSL_CONF=/dev/null
    depends_on:
      - api
    networks:
      - veritas-network
    command: ["npm", "run", "serve:visualization-showcase"]

  # Memgraph Database
  memgraph:
    image: memgraph/memgraph:latest
    ports:
      - "7687:7687"
      - "7444:7444"
    volumes:
      - memgraph-data:/var/lib/memgraph
    environment:
      - MEMGRAPH_USERNAME=memgraph
      - MEMGRAPH_PASSWORD=memgraph
    networks:
      - veritas-network

  # Redis Cache
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - veritas-network

  # Redis Commander (UI for Redis)
  redis-commander:
    image: rediscommander/redis-commander:latest
    platform: linux/arm64
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=redis:redis:6379
    depends_on:
      - redis
    networks:
      - veritas-network

  # Zookeeper (required for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - veritas-network

  # Kafka Message Broker
  kafka:
    image: confluentinc/cp-kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - veritas-network

  # Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    depends_on:
      - kafka
    networks:
      - veritas-network

  # Twitter Mock Service
  twitter-mock:
    build:
      context: .
      dockerfile: tools/mocks/Dockerfile.twitter
    ports:
      - "4001:4001"
    environment:
      - PORT=4001
      - DELAY_MS=100
      - ERROR_RATE=0.05
    networks:
      - veritas-network

volumes:
  memgraph-data:
  redis-data:

networks:
  veritas-network:
    driver: bridge 