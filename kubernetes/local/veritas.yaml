apiVersion: v1
kind: Namespace
metadata:
  name: veritas-local
---
# API Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: veritas-api
  namespace: veritas-local
spec:
  replicas: 1
  selector:
    matchLabels:
      app: veritas-api
  template:
    metadata:
      labels:
        app: veritas-api
    spec:
      containers:
      - name: api
        image: veritas-api:dev
        imagePullPolicy: Never
        ports:
        - containerPort: 4000
        env:
        - name: NODE_ENV
          value: "development"
        - name: PORT
          value: "4000"
        - name: MEMGRAPH_HOST
          value: "veritas-memgraph"
        - name: MEMGRAPH_PORT
          value: "7687"
        - name: REDIS_HOST
          value: "veritas-redis"
        - name: REDIS_PORT
          value: "6379"
        - name: KAFKA_BROKERS
          value: "veritas-kafka:9092"
        - name: MOCK_DATA
          value: "true"
        resources:
          limits:
            cpu: "500m"
            memory: "512Mi"
          requests:
            cpu: "200m"
            memory: "256Mi"
        readinessProbe:
          httpGet:
            path: /health
            port: 4000
          initialDelaySeconds: 10
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: veritas-api
  namespace: veritas-local
spec:
  selector:
    app: veritas-api
  ports:
  - port: 80
    targetPort: 4000
  type: ClusterIP
---
# Frontend Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: veritas-frontend
  namespace: veritas-local
spec:
  replicas: 1
  selector:
    matchLabels:
      app: veritas-frontend
  template:
    metadata:
      labels:
        app: veritas-frontend
    spec:
      containers:
      - name: frontend
        image: veritas-frontend:dev
        imagePullPolicy: Never
        ports:
        - containerPort: 3000
        env:
        - name: NODE_ENV
          value: "development"
        - name: PORT
          value: "3000"
        - name: API_URL
          value: "http://veritas-api"
        resources:
          limits:
            cpu: "300m"
            memory: "512Mi"
          requests:
            cpu: "100m"
            memory: "256Mi"
---
apiVersion: v1
kind: Service
metadata:
  name: veritas-frontend
  namespace: veritas-local
spec:
  selector:
    app: veritas-frontend
  ports:
  - port: 80
    targetPort: 3000
  type: ClusterIP
---
# Memgraph Database
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: veritas-memgraph
  namespace: veritas-local
spec:
  serviceName: "veritas-memgraph"
  replicas: 1
  selector:
    matchLabels:
      app: veritas-memgraph
  template:
    metadata:
      labels:
        app: veritas-memgraph
    spec:
      containers:
      - name: memgraph
        image: memgraph/memgraph-platform:latest
        ports:
        - containerPort: 7687
          name: bolt
        - containerPort: 7444
          name: http
        - containerPort: 3000
          name: lab
        volumeMounts:
        - name: memgraph-data
          mountPath: /var/lib/memgraph
        env:
        - name: MEMGRAPH_USER
          value: "memgraph"
        - name: MEMGRAPH_PASSWORD
          value: "memgraph"
        resources:
          limits:
            cpu: "1000m"
            memory: "2Gi"
          requests:
            cpu: "500m"
            memory: "1Gi"
  volumeClaimTemplates:
  - metadata:
      name: memgraph-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: veritas-memgraph
  namespace: veritas-local
spec:
  selector:
    app: veritas-memgraph
  ports:
  - port: 7687
    name: bolt
    targetPort: 7687
  - port: 7444
    name: http
    targetPort: 7444
  - port: 3000
    name: lab
    targetPort: 3000
  type: ClusterIP
---
# Redis Cache
apiVersion: apps/v1
kind: Deployment
metadata:
  name: veritas-redis
  namespace: veritas-local
spec:
  replicas: 1
  selector:
    matchLabels:
      app: veritas-redis
  template:
    metadata:
      labels:
        app: veritas-redis
    spec:
      containers:
      - name: redis
        image: redis:6-alpine
        args: ["--appendonly", "yes"]
        ports:
        - containerPort: 6379
        volumeMounts:
        - name: redis-data
          mountPath: /data
        resources:
          limits:
            cpu: "300m"
            memory: "512Mi"
          requests:
            cpu: "100m"
            memory: "256Mi"
      volumes:
      - name: redis-data
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: veritas-redis
  namespace: veritas-local
spec:
  selector:
    app: veritas-redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP
---
# Kafka
apiVersion: apps/v1
kind: Deployment
metadata:
  name: veritas-zookeeper
  namespace: veritas-local
spec:
  replicas: 1
  selector:
    matchLabels:
      app: veritas-zookeeper
  template:
    metadata:
      labels:
        app: veritas-zookeeper
    spec:
      containers:
      - name: zookeeper
        image: confluentinc/cp-zookeeper:7.0.1
        ports:
        - containerPort: 2181
        env:
        - name: ZOOKEEPER_CLIENT_PORT
          value: "2181"
        - name: ZOOKEEPER_TICK_TIME
          value: "2000"
        resources:
          limits:
            cpu: "300m"
            memory: "512Mi"
          requests:
            cpu: "100m"
            memory: "256Mi"
---
apiVersion: v1
kind: Service
metadata:
  name: veritas-zookeeper
  namespace: veritas-local
spec:
  selector:
    app: veritas-zookeeper
  ports:
  - port: 2181
    targetPort: 2181
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: veritas-kafka
  namespace: veritas-local
spec:
  replicas: 1
  selector:
    matchLabels:
      app: veritas-kafka
  template:
    metadata:
      labels:
        app: veritas-kafka
    spec:
      containers:
      - name: kafka
        image: confluentinc/cp-kafka:7.0.1
        ports:
        - containerPort: 9092
        env:
        - name: KAFKA_BROKER_ID
          value: "1"
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: "veritas-zookeeper:2181"
        - name: KAFKA_ADVERTISED_LISTENERS
          value: "PLAINTEXT://veritas-kafka:9092"
        - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
          value: "1"
        - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
          value: "true"
        resources:
          limits:
            cpu: "1000m"
            memory: "1Gi"
          requests:
            cpu: "500m"
            memory: "512Mi"
---
apiVersion: v1
kind: Service
metadata:
  name: veritas-kafka
  namespace: veritas-local
spec:
  selector:
    app: veritas-kafka
  ports:
  - port: 9092
    targetPort: 9092
  type: ClusterIP
---
# Ingress for accessing services
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: veritas-ingress
  namespace: veritas-local
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: veritas.local
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: veritas-api
            port:
              number: 80
      - path: /
        pathType: Prefix
        backend:
          service:
            name: veritas-frontend
            port:
              number: 80 